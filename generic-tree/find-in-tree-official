//find-in-tree-official

#include <bits/stdc++.h>
#include <vector>
#include <stack>

using namespace std;

struct Node
{
    int data;
    vector<Node *> children;
};

Node *construct(int arr[], int n)
{
    Node *root = NULL;
    stack<Node *> st;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] == -1)
        {
            if (st.size() != 0)
                st.pop();
        }
        else
        {
            Node *t = new Node();
            t->data = arr[i];

            if (st.size() > 0)
            {
                Node *top = st.top();
                top->children.push_back(t);
            }

            else
            {
                root = t;
            }
            st.push(t);
        }
    }
    return root;
};

int size(Node *node)
{
    int s = 0;

    for (int i = 0; i < node->children.size(); i++)
    {
        s += size(node->children[i]);
    }
    s += 1;

    return s;
}


bool find(Node *root, int b) 
{
    if (root->data == b) {
      return true;
    }

    for (Node *child : root->children) {
      bool fic = find(child, b);
      if (fic) {
        return true;
      }
    }

    return false;
  }

void display(Node *root)
{
    if(root == NULL)return;
    string str = to_string(root->data) + "->" + " ";
    for (Node* child : root->children)
    {
        str +=to_string(child->data) + ","+" ";
    }
    str += ".";
    cout << (str) <<endl;

   for (Node * child : root->children)
 {
         display(child);
 }
}

int main()
{
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++)
        cin >> arr[i];
        
    int b;cin>>b;

    Node *root = construct(arr, n);
    bool flag = find(root, b);
    if(flag==1)
    cout<<"true"<<endl;
    
    else
    cout<<"false"<<endl;
}
